schema {
  query: Query
  mutation: Mutation
}

interface IBaseError {
  message: String
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type BadRequest implements IBaseError {
  message: String
}

type BaseError implements IBaseError {
  message: String
}

type CreateWebHookPayload {
  hook: GQL_WebHook
  errors: [ICreateWebHookError]
  query: Query!
}

type GQL_User implements Node {
  id: ID!
  systemid: String!
  name: String
  sessionId: String!
  email: String
}

type GQL_WebHook implements Node {
  id: ID!
  systemid: Long!
  records("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: GQL_WebHookRecordFilterInput): RecordsConnection
  guid: String
  webHookUrl: String
  contentType: String
  isActive: Boolean!
  listeningEvents: [HookEventType!]
  lastTrigger: DateTime
}

type GQL_WebHookRecord implements Node {
  id: ID!
  systemid: Long!
  webHookID: ID
  webHookSystemID: Long!
  webHook: GQL_WebHook
  guid: String
  triggerType: HookEventType!
  result: RecordResult!
  statusCode: Int!
  responseBody: String
  requestBody: String
  requestHeaders: String
  exception: String
  timestamp: DateTime!
}

type InternalServerError implements IBaseError {
  message: String
}

type Mutation {
  createWebHook(request: CreateWebHookInput): CreateWebHookPayload
  updateWebHook(request: UpdateWebHookInput): UpdateWebHookPayload
  updateWebHookActivState(request: UpdateWebHookActivStateInput): UpdateWebHookActivStatePayload
  updateWebHookUri(request: UpdateWebHookUriInput): UpdateWebHookUriPayload
  updateWebHookSecret(request: UpdateWebHookSecretInput): UpdateWebHookSecretPayload
  updateWebHookTriggerEvents(request: UpdateWebHookTriggerEventsInput): UpdateWebHookTriggerEventsPayload
  removeWebHook(request: RemoveWebHookInput): RemoveWebHookPayload
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  webhooks("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: GQL_WebHookFilterInput): WebhooksConnection
  webHooksStream: [GQL_WebHook]
  webHookRecords(hook_id: ID! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: GQL_WebHookRecordFilterInput): WebHookRecordsConnection
  webHookEventsTriggers: [String]
  webHookRecord(hook_record_id: ID!): GQL_WebHookRecord
  webHookById(webhook_id: ID!): GQL_WebHook
  webHookBySystemId(webhook_id: Long!): GQL_WebHook
  me: GQL_User
  serverDateTime: DateTime!
}

"A connection to a list of items."
type RecordsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RecordsEdge!]
  "A flattened list of the nodes."
  nodes: [GQL_WebHookRecord]
  totalCount: Int!
}

"An edge in a connection."
type RecordsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GQL_WebHookRecord
}

type RemoveWebHookPayload {
  removed_id: ID
  errors: [IRemoveWebHookError]
  query: Query!
}

type UnAuthorised implements IBaseError {
  message: String
}

type UpdateWebHookActivStatePayload {
  hook: GQL_WebHook
  errors: [IUpdateWebHookActivStateError]
  query: Query!
}

type UpdateWebHookPayload {
  hook: GQL_WebHook
  errors: [IUpdateWebHookError]
  query: Query!
}

type UpdateWebHookSecretPayload {
  hook: GQL_WebHook
  errors: [IUpdateWebHookSecretError]
  query: Query!
}

type UpdateWebHookTriggerEventsPayload {
  hook: GQL_WebHook
  errors: [IUpdateWebHookTriggerEventsError]
  query: Query!
}

type UpdateWebHookUriPayload {
  hook: GQL_WebHook
  errors: [IUpdateWebHookUriError]
  query: Query!
}

type UserDeactivated implements IBaseError {
  message: String
}

type ValidationError implements IBaseError {
  fieldName: String
  message: String
}

type WebHookNotFound implements IBaseError {
  message: String
}

"A connection to a list of items."
type WebHookRecordsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [WebHookRecordsEdge!]
  "A flattened list of the nodes."
  nodes: [GQL_WebHookRecord]
  totalCount: Int!
}

"An edge in a connection."
type WebHookRecordsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GQL_WebHookRecord
}

"A connection to a list of items."
type WebhooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [WebhooksEdge!]
  "A flattened list of the nodes."
  nodes: [GQL_WebHook]
  totalCount: Int!
}

"An edge in a connection."
type WebhooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GQL_WebHook
}

union ICreateWebHookError = ValidationError | UnAuthorised | InternalServerError

union IRemoveWebHookError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

union IUpdateWebHookActivStateError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

union IUpdateWebHookError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

union IUpdateWebHookSecretError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

union IUpdateWebHookTriggerEventsError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

union IUpdateWebHookUriError = ValidationError | UnAuthorised | InternalServerError | WebHookNotFound

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input CreateWebHookInput {
  webHookUrl: String
  secret: String
  isActive: Boolean!
  hookEvents: [HookEventType!]
}

input GQL_WebHookFilterInput {
  and: [GQL_WebHookFilterInput!]
  or: [GQL_WebHookFilterInput!]
  iD: ComparableInt64OperationFilterInput
  guid: StringOperationFilterInput
  webHookUrl: StringOperationFilterInput
  contentType: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  listeningEvents: ListHookEventTypeOperationFilterInput
  records: ListFilterInputTypeOfGQL_WebHookRecordFilterInput
  lastTrigger: ComparableNullableOfDateTimeOperationFilterInput
}

input GQL_WebHookRecordFilterInput {
  and: [GQL_WebHookRecordFilterInput!]
  or: [GQL_WebHookRecordFilterInput!]
  iD: ComparableInt64OperationFilterInput
  webHookID: ComparableInt64OperationFilterInput
  webHookSystemID: ComparableInt64OperationFilterInput
  guid: StringOperationFilterInput
  webHook: GQL_WebHookFilterInput
  triggerType: HookEventTypeOperationFilterInput
  result: RecordResultOperationFilterInput
  statusCode: ComparableInt32OperationFilterInput
  responseBody: StringOperationFilterInput
  requestBody: StringOperationFilterInput
  requestHeaders: StringOperationFilterInput
  exception: StringOperationFilterInput
  timestamp: ComparableDateTimeOperationFilterInput
}

input HookEventTypeOperationFilterInput {
  eq: HookEventType
  neq: HookEventType
  in: [HookEventType!]
  nin: [HookEventType!]
}

input ListFilterInputTypeOfGQL_WebHookRecordFilterInput {
  all: GQL_WebHookRecordFilterInput
  none: GQL_WebHookRecordFilterInput
  some: GQL_WebHookRecordFilterInput
  any: Boolean
}

input ListHookEventTypeOperationFilterInput {
  all: HookEventTypeOperationFilterInput
  none: HookEventTypeOperationFilterInput
  some: HookEventTypeOperationFilterInput
  any: Boolean
}

input RecordResultOperationFilterInput {
  eq: RecordResult
  neq: RecordResult
  in: [RecordResult!]
  nin: [RecordResult!]
}

input RemoveWebHookInput {
  webHookId: Long!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateWebHookActivStateInput {
  webHookId: Long!
  isActive: Boolean!
}

input UpdateWebHookInput {
  webHookId: Long!
  webHookUrl: String
  secret: String
  isActive: Boolean!
  hookEvents: [HookEventType!]
}

input UpdateWebHookSecretInput {
  webHookId: Long!
  secret: String
}

input UpdateWebHookTriggerEventsInput {
  webHookId: Long!
  hookEvents: [HookEventType!]
}

input UpdateWebHookUriInput {
  webHookId: Long!
  webHookUrl: String
}

enum HookEventType {
  HOOK
  FILE
  NOTE
  PROJECT
  MILESTONE
}

enum RecordResult {
  UNDEFINED
  OK
  PARAMETER_ERROR
  HTTP_ERROR
  DATA_QUERY_ERROR
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long